{"version":3,"file":"ngx-export-as.js","sources":["ng:/ngx-export-as/lib/export-as.service.ts","ng:/ngx-export-as/lib/export-as.module.ts"],"names":["XLSX.utils","XLSX.write"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { ExportAsConfig } from './export-as-config.model';\r\n\r\nimport html2canvas from 'html2canvas';\r\nimport * as XLSX from 'xlsx';\r\n// import * as htmlDocx from 'html-docx-js/dist/html-docx';\r\nimport html2pdf from 'html2pdf.js';\r\n\r\nwindow['html2canvas'] = html2canvas;\r\n\r\n@Injectable()\r\nexport class ExportAsService {\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * Main base64 get method, it will return the file as base64 string\r\n   * @param config your config\r\n   */\r\n  get(config: ExportAsConfig): Observable<string | null> {\r\n    // structure method name dynamically by type\r\n    const func = 'get' + config.type.toUpperCase();\r\n    // if type supported execute and return\r\n    if (this[func]) {\r\n      return this[func](config);\r\n    }\r\n\r\n    // throw error for unsupported formats\r\n    return Observable.create((observer) => { observer.error('Export type is not supported.'); });\r\n  }\r\n\r\n  /**\r\n   * Save exported file in old javascript way\r\n   * @param config your custom config\r\n   * @param fileName Name of the file to be saved as\r\n   */\r\n  save(config: ExportAsConfig, fileName: string): Observable<string | null> {\r\n    // set download\r\n    config.download = true;\r\n    // get file name with type\r\n    config.fileName = fileName + '.' + config.type;\r\n    return this.get(config);\r\n  }\r\n\r\n  /**\r\n   * Converts content string to blob object\r\n   * @param content string to be converted\r\n   */\r\n  contentToBlob(content: string): Observable<Blob> {\r\n    return Observable.create((observer) => {\r\n      // get content string and extract mime type\r\n      const arr = content.split(','), mime = arr[0].match(/:(.*?);/)[1],\r\n        bstr = atob(arr[1]);\r\n      let n = bstr.length;\r\n      const u8arr = new Uint8Array(n);\r\n      while (n--) {\r\n        u8arr[n] = bstr.charCodeAt(n);\r\n      }\r\n      observer.next(new Blob([u8arr], { type: mime }));\r\n      observer.complete();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Removes base64 file type from a string like \"data:text/csv;base64,\"\r\n   * @param fileContent the base64 string to remove the type from\r\n   */\r\n  removeFileTypeFromBase64(fileContent: string): string {\r\n    const re = /^data:[^]*;base64,/g;\r\n    const newContent: string = re[Symbol.replace](fileContent, '');\r\n    return newContent;\r\n  }\r\n\r\n  /**\r\n   * Structure the base64 file content with the file type string\r\n   * @param fileContent file content\r\n   * @param fileMime file mime type \"text/csv\"\r\n   */\r\n  addFileTypeToBase64(fileContent: string, fileMime: string): string {\r\n    return `data:${fileMime};base64,${fileContent}`;\r\n  }\r\n\r\n  /**\r\n   * create downloadable file from dataURL\r\n   * @param fileName downloadable file name\r\n   * @param dataURL file content as dataURL\r\n   */\r\n  downloadFromDataURL(fileName: string, dataURL: string): void {\r\n    // create blob\r\n    this.contentToBlob(dataURL).subscribe(blob => {\r\n      // download the blob\r\n      this.downloadFromBlob(blob, fileName);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Downloads the blob object as a file\r\n   * @param blob file object as blob\r\n   * @param fileName downloadable file name\r\n   */\r\n  downloadFromBlob(blob: Blob, fileName: string) {\r\n    // get object url\r\n    const url = window.URL.createObjectURL(blob);\r\n    // check for microsoft internet explorer\r\n    if (window.navigator && window.navigator.msSaveOrOpenBlob) {\r\n      // use IE download or open if the user using IE\r\n      window.navigator.msSaveOrOpenBlob(blob, fileName);\r\n    } else {\r\n      // if not using IE then create link element\r\n      const element = document.createElement('a');\r\n      // set download attr with file name\r\n      element.setAttribute('download', fileName);\r\n      // set the element as hidden\r\n      element.style.display = 'none';\r\n      // append the body\r\n      document.body.appendChild(element);\r\n      // set href attr\r\n      element.href = url;\r\n      // click on it to start downloading\r\n      element.click();\r\n      // remove the link from the dom\r\n      document.body.removeChild(element);\r\n    }\r\n  }\r\n\r\n  private getPDF(config: ExportAsConfig): Observable<string | null> {\r\n    return Observable.create((observer) => {\r\n      if (!config.options) {\r\n        config.options = {};\r\n      }\r\n      config.options.filename = config.fileName;\r\n      const element: HTMLElement = document.getElementById(config.elementId);\r\n      const pdf = html2pdf().set(config.options).from(element, 'element');\r\n\r\n      const download = config.download;\r\n      const pdfCallbackFn = config.options.pdfCallbackFn;\r\n      if (download) {\r\n        if (pdfCallbackFn) {\r\n          this.applyPdfCallbackFn(pdf, pdfCallbackFn).save();\r\n        } else {\r\n          pdf.save();\r\n        }\r\n        observer.next();\r\n        observer.complete();\r\n      } else {\r\n        if (pdfCallbackFn) {\r\n          this.applyPdfCallbackFn(pdf, pdfCallbackFn).outputPdf('datauristring').then(data => {\r\n            observer.next(data);\r\n            observer.complete();\r\n          });\r\n        } else {\r\n          pdf.outputPdf('datauristring').then(data => {\r\n            observer.next(data);\r\n            observer.complete();\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private applyPdfCallbackFn(pdf, pdfCallbackFn) {\r\n    return pdf.toPdf().get('pdf').then((pdfRef) => {\r\n      pdfCallbackFn(pdfRef);\r\n    });\r\n  }\r\n\r\n  private getPNG(config: ExportAsConfig): Observable<string | null> {\r\n    return Observable.create((observer) => {\r\n      const element: HTMLElement = document.getElementById(config.elementId);\r\n      html2canvas(element, config.options).then((canvas) => {\r\n        const imgData = canvas.toDataURL('image/PNG');\r\n        if (config.type === 'png' && config.download) {\r\n          this.downloadFromDataURL(config.fileName, imgData);\r\n          observer.next();\r\n        } else {\r\n          observer.next(imgData);\r\n        }\r\n        observer.complete();\r\n      }, err => {\r\n        observer.error(err);\r\n      });\r\n    });\r\n  }\r\n\r\n  private getCSV(config: ExportAsConfig): Observable<string | null> {\r\n    return Observable.create((observer) => {\r\n      const element: HTMLElement = document.getElementById(config.elementId);\r\n      const csv = [];\r\n      const rows: any = element.querySelectorAll('table tr');\r\n      for (let index = 0; index < rows.length; index++) {\r\n        const rowElement = rows[index];\r\n        const row = [];\r\n        const cols = rowElement.querySelectorAll('td, th');\r\n        for (let colIndex = 0; colIndex < cols.length; colIndex++) {\r\n          const col = cols[colIndex];\r\n          row.push(col.innerText);\r\n        }\r\n        csv.push(row.join(','));\r\n      }\r\n      const csvContent = 'data:text/csv;base64,' + this.btoa(csv.join('\\n'));\r\n      if (config.download) {\r\n        this.downloadFromDataURL(config.fileName, csvContent);\r\n        observer.next();\r\n      } else {\r\n        observer.next(csvContent);\r\n      }\r\n      observer.complete();\r\n    });\r\n  }\r\n\r\n  private getTXT(config: ExportAsConfig): Observable<string | null> {\r\n    const nameFrags = config.fileName.split('.');\r\n    config.fileName = `${nameFrags[0]}.txt`;\r\n    return this.getCSV(config);\r\n  }\r\n\r\n  private getXLS(config: ExportAsConfig): Observable<string | null> {\r\n    return Observable.create((observer) => {\r\n\r\n      const element: HTMLElement = document.getElementById(config.elementId);\r\n      const ws3 = XLSX.utils.table_to_sheet(element, config.options);\r\n      const wb = XLSX.utils.book_new();\r\n      XLSX.utils.book_append_sheet(wb, ws3, config.fileName);\r\n      const out = XLSX.write(wb, { type: 'base64' });\r\n      const xlsContent = 'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,' + out;\r\n      if (config.download) {\r\n        this.downloadFromDataURL(config.fileName, xlsContent);\r\n        observer.next();\r\n      } else {\r\n        observer.next(xlsContent);\r\n      }\r\n      observer.complete();\r\n    });\r\n  }\r\n\r\n  private getXLSX(config: ExportAsConfig): Observable<string | null> {\r\n    return this.getXLS(config);\r\n  }\r\n\r\n  // private getDOCX(config: ExportAsConfig): Observable<string | null> {\r\n  //   return Observable.create((observer) => {\r\n  //     const contentDocument: string = document.getElementById(config.elementId).outerHTML;\r\n  //     const content = '<!DOCTYPE html>' + contentDocument;\r\n  //     const converted = htmlDocx.asBlob(content, config.options);\r\n  //     if (config.download) {\r\n  //       this.downloadFromBlob(converted, config.fileName);\r\n  //       observer.next();\r\n  //       observer.complete();\r\n  //     } else {\r\n  //       const reader = new FileReader();\r\n  //       reader.onloadend = () => {\r\n  //         const base64data = reader.result;\r\n  //         observer.next(base64data);\r\n  //         observer.complete();\r\n  //       };\r\n  //       reader.readAsDataURL(converted);\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n  // private getDOC(config: ExportAsConfig): Observable<string | null> {\r\n  //   return this.getDOCX(config);\r\n  // }\r\n\r\n  private getJSON(config: ExportAsConfig): Observable<any[] | null> {\r\n    return Observable.create((observer) => {\r\n      const data = []; // first row needs to be headers\r\n      const headers = [];\r\n      const table = <HTMLTableElement>document.getElementById(config.elementId);\r\n      for (let index = 0; index < table.rows[0].cells.length; index++) {\r\n        headers[index] = table.rows[0].cells[index].innerHTML.toLowerCase().replace(/ /gi, '');\r\n      }\r\n      // go through cells\r\n      for (let i = 1; i < table.rows.length; i++) {\r\n        const tableRow = table.rows[i]; const rowData = {};\r\n        for (let j = 0; j < tableRow.cells.length; j++) {\r\n          rowData[headers[j]] = tableRow.cells[j].innerHTML;\r\n        }\r\n        data.push(rowData);\r\n      }\r\n      const jsonString = JSON.stringify(data);\r\n      const jsonBase64 = this.btoa(jsonString);\r\n      const dataStr = 'data:text/json;base64,' + jsonBase64;\r\n      if (config.download) {\r\n        this.downloadFromDataURL(config.fileName, dataStr);\r\n        observer.next();\r\n      } else {\r\n        observer.next(data);\r\n      }\r\n      observer.complete();\r\n    });\r\n  }\r\n\r\n  private getXML(config: ExportAsConfig): Observable<string | null> {\r\n    return Observable.create((observer) => {\r\n      let xml = '<?xml version=\"1.0\" encoding=\"UTF-8\"?><Root><Classes>';\r\n      const tritem = document.getElementById(config.elementId).getElementsByTagName('tr');\r\n      for (let i = 0; i < tritem.length; i++) {\r\n        const celldata = tritem[i];\r\n        if (celldata.cells.length > 0) {\r\n          xml += '<Class name=\"' + celldata.cells[0].textContent + '\">\\n';\r\n          for (let m = 1; m < celldata.cells.length; ++m) {\r\n            xml += '\\t<data>' + celldata.cells[m].textContent + '</data>\\n';\r\n          }\r\n          xml += '</Class>\\n';\r\n        }\r\n      }\r\n      xml += '</Classes></Root>';\r\n      const base64 = 'data:text/xml;base64,' + this.btoa(xml);\r\n      if (config.download) {\r\n        this.downloadFromDataURL(config.fileName, base64);\r\n        observer.next();\r\n      } else {\r\n        observer.next(base64);\r\n      }\r\n      observer.complete();\r\n    });\r\n  }\r\n\r\n  private btoa(content: string) {\r\n    return btoa(unescape(encodeURIComponent(content)));\r\n  }\r\n\r\n}\r\n","/**\n * angular imports\n */\nimport { NgModule } from '@angular/core';\n\n/**\n * my imports\n */\nimport { ExportAsService } from './export-as.service';\n\n@NgModule({\n  providers: [ExportAsService],\n})\nexport class ExportAsModule { }\n\n"]}