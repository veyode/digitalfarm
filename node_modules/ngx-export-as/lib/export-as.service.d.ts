import { Observable } from 'rxjs';
import { ExportAsConfig } from './export-as-config.model';
import * as ɵngcc0 from '@angular/core';
export declare class ExportAsService {
    constructor();
    /**
     * Main base64 get method, it will return the file as base64 string
     * @param config your config
     */
    get(config: ExportAsConfig): Observable<string | null>;
    /**
     * Save exported file in old javascript way
     * @param config your custom config
     * @param fileName Name of the file to be saved as
     */
    save(config: ExportAsConfig, fileName: string): Observable<string | null>;
    /**
     * Converts content string to blob object
     * @param content string to be converted
     */
    contentToBlob(content: string): Observable<Blob>;
    /**
     * Removes base64 file type from a string like "data:text/csv;base64,"
     * @param fileContent the base64 string to remove the type from
     */
    removeFileTypeFromBase64(fileContent: string): string;
    /**
     * Structure the base64 file content with the file type string
     * @param fileContent file content
     * @param fileMime file mime type "text/csv"
     */
    addFileTypeToBase64(fileContent: string, fileMime: string): string;
    /**
     * create downloadable file from dataURL
     * @param fileName downloadable file name
     * @param dataURL file content as dataURL
     */
    downloadFromDataURL(fileName: string, dataURL: string): void;
    /**
     * Downloads the blob object as a file
     * @param blob file object as blob
     * @param fileName downloadable file name
     */
    downloadFromBlob(blob: Blob, fileName: string): void;
    private getPDF;
    private applyPdfCallbackFn;
    private getPNG;
    private getCSV;
    private getTXT;
    private getXLS;
    private getXLSX;
    private getJSON;
    private getXML;
    private btoa;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ExportAsService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ExportAsService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwb3J0LWFzLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiZXhwb3J0LWFzLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEV4cG9ydEFzQ29uZmlnIH0gZnJvbSAnLi9leHBvcnQtYXMtY29uZmlnLm1vZGVsJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRXhwb3J0QXNTZXJ2aWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKCk7XHJcbiAgICAvKipcclxuICAgICAqIE1haW4gYmFzZTY0IGdldCBtZXRob2QsIGl0IHdpbGwgcmV0dXJuIHRoZSBmaWxlIGFzIGJhc2U2NCBzdHJpbmdcclxuICAgICAqIEBwYXJhbSBjb25maWcgeW91ciBjb25maWdcclxuICAgICAqL1xyXG4gICAgZ2V0KGNvbmZpZzogRXhwb3J0QXNDb25maWcpOiBPYnNlcnZhYmxlPHN0cmluZyB8IG51bGw+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTYXZlIGV4cG9ydGVkIGZpbGUgaW4gb2xkIGphdmFzY3JpcHQgd2F5XHJcbiAgICAgKiBAcGFyYW0gY29uZmlnIHlvdXIgY3VzdG9tIGNvbmZpZ1xyXG4gICAgICogQHBhcmFtIGZpbGVOYW1lIE5hbWUgb2YgdGhlIGZpbGUgdG8gYmUgc2F2ZWQgYXNcclxuICAgICAqL1xyXG4gICAgc2F2ZShjb25maWc6IEV4cG9ydEFzQ29uZmlnLCBmaWxlTmFtZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxzdHJpbmcgfCBudWxsPjtcclxuICAgIC8qKlxyXG4gICAgICogQ29udmVydHMgY29udGVudCBzdHJpbmcgdG8gYmxvYiBvYmplY3RcclxuICAgICAqIEBwYXJhbSBjb250ZW50IHN0cmluZyB0byBiZSBjb252ZXJ0ZWRcclxuICAgICAqL1xyXG4gICAgY29udGVudFRvQmxvYihjb250ZW50OiBzdHJpbmcpOiBPYnNlcnZhYmxlPEJsb2I+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmVzIGJhc2U2NCBmaWxlIHR5cGUgZnJvbSBhIHN0cmluZyBsaWtlIFwiZGF0YTp0ZXh0L2NzdjtiYXNlNjQsXCJcclxuICAgICAqIEBwYXJhbSBmaWxlQ29udGVudCB0aGUgYmFzZTY0IHN0cmluZyB0byByZW1vdmUgdGhlIHR5cGUgZnJvbVxyXG4gICAgICovXHJcbiAgICByZW1vdmVGaWxlVHlwZUZyb21CYXNlNjQoZmlsZUNvbnRlbnQ6IHN0cmluZyk6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogU3RydWN0dXJlIHRoZSBiYXNlNjQgZmlsZSBjb250ZW50IHdpdGggdGhlIGZpbGUgdHlwZSBzdHJpbmdcclxuICAgICAqIEBwYXJhbSBmaWxlQ29udGVudCBmaWxlIGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSBmaWxlTWltZSBmaWxlIG1pbWUgdHlwZSBcInRleHQvY3N2XCJcclxuICAgICAqL1xyXG4gICAgYWRkRmlsZVR5cGVUb0Jhc2U2NChmaWxlQ29udGVudDogc3RyaW5nLCBmaWxlTWltZTogc3RyaW5nKTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBjcmVhdGUgZG93bmxvYWRhYmxlIGZpbGUgZnJvbSBkYXRhVVJMXHJcbiAgICAgKiBAcGFyYW0gZmlsZU5hbWUgZG93bmxvYWRhYmxlIGZpbGUgbmFtZVxyXG4gICAgICogQHBhcmFtIGRhdGFVUkwgZmlsZSBjb250ZW50IGFzIGRhdGFVUkxcclxuICAgICAqL1xyXG4gICAgZG93bmxvYWRGcm9tRGF0YVVSTChmaWxlTmFtZTogc3RyaW5nLCBkYXRhVVJMOiBzdHJpbmcpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBEb3dubG9hZHMgdGhlIGJsb2Igb2JqZWN0IGFzIGEgZmlsZVxyXG4gICAgICogQHBhcmFtIGJsb2IgZmlsZSBvYmplY3QgYXMgYmxvYlxyXG4gICAgICogQHBhcmFtIGZpbGVOYW1lIGRvd25sb2FkYWJsZSBmaWxlIG5hbWVcclxuICAgICAqL1xyXG4gICAgZG93bmxvYWRGcm9tQmxvYihibG9iOiBCbG9iLCBmaWxlTmFtZTogc3RyaW5nKTogdm9pZDtcclxuICAgIHByaXZhdGUgZ2V0UERGO1xyXG4gICAgcHJpdmF0ZSBhcHBseVBkZkNhbGxiYWNrRm47XHJcbiAgICBwcml2YXRlIGdldFBORztcclxuICAgIHByaXZhdGUgZ2V0Q1NWO1xyXG4gICAgcHJpdmF0ZSBnZXRUWFQ7XHJcbiAgICBwcml2YXRlIGdldFhMUztcclxuICAgIHByaXZhdGUgZ2V0WExTWDtcclxuICAgIHByaXZhdGUgZ2V0SlNPTjtcclxuICAgIHByaXZhdGUgZ2V0WE1MO1xyXG4gICAgcHJpdmF0ZSBidG9hO1xyXG59XHJcbiJdfQ==