{"version":3,"file":"ngx-export-as.umd.js","sources":["ng://ngx-export-as/lib/export-as.service.ts","ng://ngx-export-as/lib/export-as.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { ExportAsConfig } from './export-as-config.model';\r\n\r\nimport html2canvas from 'html2canvas';\r\nimport * as XLSX from 'xlsx';\r\n// import * as htmlDocx from 'html-docx-js/dist/html-docx';\r\nimport html2pdf from 'html2pdf.js';\r\n\r\nwindow['html2canvas'] = html2canvas;\r\n\r\n@Injectable()\r\nexport class ExportAsService {\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * Main base64 get method, it will return the file as base64 string\r\n   * @param config your config\r\n   */\r\n  get(config: ExportAsConfig): Observable<string | null> {\r\n    // structure method name dynamically by type\r\n    const func = 'get' + config.type.toUpperCase();\r\n    // if type supported execute and return\r\n    if (this[func]) {\r\n      return this[func](config);\r\n    }\r\n\r\n    // throw error for unsupported formats\r\n    return Observable.create((observer) => { observer.error('Export type is not supported.'); });\r\n  }\r\n\r\n  /**\r\n   * Save exported file in old javascript way\r\n   * @param config your custom config\r\n   * @param fileName Name of the file to be saved as\r\n   */\r\n  save(config: ExportAsConfig, fileName: string): Observable<string | null> {\r\n    // set download\r\n    config.download = true;\r\n    // get file name with type\r\n    config.fileName = fileName + '.' + config.type;\r\n    return this.get(config);\r\n  }\r\n\r\n  /**\r\n   * Converts content string to blob object\r\n   * @param content string to be converted\r\n   */\r\n  contentToBlob(content: string): Observable<Blob> {\r\n    return Observable.create((observer) => {\r\n      // get content string and extract mime type\r\n      const arr = content.split(','), mime = arr[0].match(/:(.*?);/)[1],\r\n        bstr = atob(arr[1]);\r\n      let n = bstr.length;\r\n      const u8arr = new Uint8Array(n);\r\n      while (n--) {\r\n        u8arr[n] = bstr.charCodeAt(n);\r\n      }\r\n      observer.next(new Blob([u8arr], { type: mime }));\r\n      observer.complete();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Removes base64 file type from a string like \"data:text/csv;base64,\"\r\n   * @param fileContent the base64 string to remove the type from\r\n   */\r\n  removeFileTypeFromBase64(fileContent: string): string {\r\n    const re = /^data:[^]*;base64,/g;\r\n    const newContent: string = re[Symbol.replace](fileContent, '');\r\n    return newContent;\r\n  }\r\n\r\n  /**\r\n   * Structure the base64 file content with the file type string\r\n   * @param fileContent file content\r\n   * @param fileMime file mime type \"text/csv\"\r\n   */\r\n  addFileTypeToBase64(fileContent: string, fileMime: string): string {\r\n    return `data:${fileMime};base64,${fileContent}`;\r\n  }\r\n\r\n  /**\r\n   * create downloadable file from dataURL\r\n   * @param fileName downloadable file name\r\n   * @param dataURL file content as dataURL\r\n   */\r\n  downloadFromDataURL(fileName: string, dataURL: string): void {\r\n    // create blob\r\n    this.contentToBlob(dataURL).subscribe(blob => {\r\n      // download the blob\r\n      this.downloadFromBlob(blob, fileName);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Downloads the blob object as a file\r\n   * @param blob file object as blob\r\n   * @param fileName downloadable file name\r\n   */\r\n  downloadFromBlob(blob: Blob, fileName: string) {\r\n    // get object url\r\n    const url = window.URL.createObjectURL(blob);\r\n    // check for microsoft internet explorer\r\n    if (window.navigator && window.navigator.msSaveOrOpenBlob) {\r\n      // use IE download or open if the user using IE\r\n      window.navigator.msSaveOrOpenBlob(blob, fileName);\r\n    } else {\r\n      // if not using IE then create link element\r\n      const element = document.createElement('a');\r\n      // set download attr with file name\r\n      element.setAttribute('download', fileName);\r\n      // set the element as hidden\r\n      element.style.display = 'none';\r\n      // append the body\r\n      document.body.appendChild(element);\r\n      // set href attr\r\n      element.href = url;\r\n      // click on it to start downloading\r\n      element.click();\r\n      // remove the link from the dom\r\n      document.body.removeChild(element);\r\n    }\r\n  }\r\n\r\n  private getPDF(config: ExportAsConfig): Observable<string | null> {\r\n    return Observable.create((observer) => {\r\n      if (!config.options) {\r\n        config.options = {};\r\n      }\r\n      config.options.filename = config.fileName;\r\n      const element: HTMLElement = document.getElementById(config.elementId);\r\n      const pdf = html2pdf().set(config.options).from(element, 'element');\r\n\r\n      const download = config.download;\r\n      const pdfCallbackFn = config.options.pdfCallbackFn;\r\n      if (download) {\r\n        if (pdfCallbackFn) {\r\n          this.applyPdfCallbackFn(pdf, pdfCallbackFn).save();\r\n        } else {\r\n          pdf.save();\r\n        }\r\n        observer.next();\r\n        observer.complete();\r\n      } else {\r\n        if (pdfCallbackFn) {\r\n          this.applyPdfCallbackFn(pdf, pdfCallbackFn).outputPdf('datauristring').then(data => {\r\n            observer.next(data);\r\n            observer.complete();\r\n          });\r\n        } else {\r\n          pdf.outputPdf('datauristring').then(data => {\r\n            observer.next(data);\r\n            observer.complete();\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private applyPdfCallbackFn(pdf, pdfCallbackFn) {\r\n    return pdf.toPdf().get('pdf').then((pdfRef) => {\r\n      pdfCallbackFn(pdfRef);\r\n    });\r\n  }\r\n\r\n  private getPNG(config: ExportAsConfig): Observable<string | null> {\r\n    return Observable.create((observer) => {\r\n      const element: HTMLElement = document.getElementById(config.elementId);\r\n      html2canvas(element, config.options).then((canvas) => {\r\n        const imgData = canvas.toDataURL('image/PNG');\r\n        if (config.type === 'png' && config.download) {\r\n          this.downloadFromDataURL(config.fileName, imgData);\r\n          observer.next();\r\n        } else {\r\n          observer.next(imgData);\r\n        }\r\n        observer.complete();\r\n      }, err => {\r\n        observer.error(err);\r\n      });\r\n    });\r\n  }\r\n\r\n  private getCSV(config: ExportAsConfig): Observable<string | null> {\r\n    return Observable.create((observer) => {\r\n      const element: HTMLElement = document.getElementById(config.elementId);\r\n      const csv = [];\r\n      const rows: any = element.querySelectorAll('table tr');\r\n      for (let index = 0; index < rows.length; index++) {\r\n        const rowElement = rows[index];\r\n        const row = [];\r\n        const cols = rowElement.querySelectorAll('td, th');\r\n        for (let colIndex = 0; colIndex < cols.length; colIndex++) {\r\n          const col = cols[colIndex];\r\n          row.push(col.innerText);\r\n        }\r\n        csv.push(row.join(','));\r\n      }\r\n      const csvContent = 'data:text/csv;base64,' + this.btoa(csv.join('\\n'));\r\n      if (config.download) {\r\n        this.downloadFromDataURL(config.fileName, csvContent);\r\n        observer.next();\r\n      } else {\r\n        observer.next(csvContent);\r\n      }\r\n      observer.complete();\r\n    });\r\n  }\r\n\r\n  private getTXT(config: ExportAsConfig): Observable<string | null> {\r\n    const nameFrags = config.fileName.split('.');\r\n    config.fileName = `${nameFrags[0]}.txt`;\r\n    return this.getCSV(config);\r\n  }\r\n\r\n  private getXLS(config: ExportAsConfig): Observable<string | null> {\r\n    return Observable.create((observer) => {\r\n\r\n      const element: HTMLElement = document.getElementById(config.elementId);\r\n      const ws3 = XLSX.utils.table_to_sheet(element, config.options);\r\n      const wb = XLSX.utils.book_new();\r\n      XLSX.utils.book_append_sheet(wb, ws3, config.fileName);\r\n      const out = XLSX.write(wb, { type: 'base64' });\r\n      const xlsContent = 'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,' + out;\r\n      if (config.download) {\r\n        this.downloadFromDataURL(config.fileName, xlsContent);\r\n        observer.next();\r\n      } else {\r\n        observer.next(xlsContent);\r\n      }\r\n      observer.complete();\r\n    });\r\n  }\r\n\r\n  private getXLSX(config: ExportAsConfig): Observable<string | null> {\r\n    return this.getXLS(config);\r\n  }\r\n\r\n  // private getDOCX(config: ExportAsConfig): Observable<string | null> {\r\n  //   return Observable.create((observer) => {\r\n  //     const contentDocument: string = document.getElementById(config.elementId).outerHTML;\r\n  //     const content = '<!DOCTYPE html>' + contentDocument;\r\n  //     const converted = htmlDocx.asBlob(content, config.options);\r\n  //     if (config.download) {\r\n  //       this.downloadFromBlob(converted, config.fileName);\r\n  //       observer.next();\r\n  //       observer.complete();\r\n  //     } else {\r\n  //       const reader = new FileReader();\r\n  //       reader.onloadend = () => {\r\n  //         const base64data = reader.result;\r\n  //         observer.next(base64data);\r\n  //         observer.complete();\r\n  //       };\r\n  //       reader.readAsDataURL(converted);\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n  // private getDOC(config: ExportAsConfig): Observable<string | null> {\r\n  //   return this.getDOCX(config);\r\n  // }\r\n\r\n  private getJSON(config: ExportAsConfig): Observable<any[] | null> {\r\n    return Observable.create((observer) => {\r\n      const data = []; // first row needs to be headers\r\n      const headers = [];\r\n      const table = <HTMLTableElement>document.getElementById(config.elementId);\r\n      for (let index = 0; index < table.rows[0].cells.length; index++) {\r\n        headers[index] = table.rows[0].cells[index].innerHTML.toLowerCase().replace(/ /gi, '');\r\n      }\r\n      // go through cells\r\n      for (let i = 1; i < table.rows.length; i++) {\r\n        const tableRow = table.rows[i]; const rowData = {};\r\n        for (let j = 0; j < tableRow.cells.length; j++) {\r\n          rowData[headers[j]] = tableRow.cells[j].innerHTML;\r\n        }\r\n        data.push(rowData);\r\n      }\r\n      const jsonString = JSON.stringify(data);\r\n      const jsonBase64 = this.btoa(jsonString);\r\n      const dataStr = 'data:text/json;base64,' + jsonBase64;\r\n      if (config.download) {\r\n        this.downloadFromDataURL(config.fileName, dataStr);\r\n        observer.next();\r\n      } else {\r\n        observer.next(data);\r\n      }\r\n      observer.complete();\r\n    });\r\n  }\r\n\r\n  private getXML(config: ExportAsConfig): Observable<string | null> {\r\n    return Observable.create((observer) => {\r\n      let xml = '<?xml version=\"1.0\" encoding=\"UTF-8\"?><Root><Classes>';\r\n      const tritem = document.getElementById(config.elementId).getElementsByTagName('tr');\r\n      for (let i = 0; i < tritem.length; i++) {\r\n        const celldata = tritem[i];\r\n        if (celldata.cells.length > 0) {\r\n          xml += '<Class name=\"' + celldata.cells[0].textContent + '\">\\n';\r\n          for (let m = 1; m < celldata.cells.length; ++m) {\r\n            xml += '\\t<data>' + celldata.cells[m].textContent + '</data>\\n';\r\n          }\r\n          xml += '</Class>\\n';\r\n        }\r\n      }\r\n      xml += '</Classes></Root>';\r\n      const base64 = 'data:text/xml;base64,' + this.btoa(xml);\r\n      if (config.download) {\r\n        this.downloadFromDataURL(config.fileName, base64);\r\n        observer.next();\r\n      } else {\r\n        observer.next(base64);\r\n      }\r\n      observer.complete();\r\n    });\r\n  }\r\n\r\n  private btoa(content: string) {\r\n    return btoa(unescape(encodeURIComponent(content)));\r\n  }\r\n\r\n}\r\n","/**\n * angular imports\n */\nimport { NgModule } from '@angular/core';\n\n/**\n * my imports\n */\nimport { ExportAsService } from './export-as.service';\n\n@NgModule({\n  providers: [ExportAsService],\n})\nexport class ExportAsModule { }\n\n\n"],"names":["Observable","XLSX.utils","XLSX.write","Injectable","NgModule"],"mappings":"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"}